// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestSpreadsheet2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Open the spreadsheet and check that the choosen cell is A1.
        /// </summary>
        public void OpenSS()
        {

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSSParams.ExePath, this.OpenSSParams.AlternateExePath);
        }
        
        /// <summary>
        /// The first cell to display should be A1.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UIForm1Window.UIA1Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellNameEditText, uICellNameEdit.Text, "The first cell is not A1.");
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 10));
        }
        
        /// <summary>
        /// Create a formula which has a variable, whose value is a string. The value of the formula should be FormulaError.
        /// </summary>
        public void FormulaErrorValue()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.FormulaErrorValueParams.UIForm1WindowExePath, this.FormulaErrorValueParams.UIForm1WindowAlternateExePath);

            // Type '7' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValueParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(168, 34));

            // Type '=a1' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValueParams.UICellContentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(240, 41));

            // Type '=b1+7' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText2;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValueParams.UICellContentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(290, 37));

            // Type 'test' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText3;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValueParams.UICellContentEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(376, 43));

            // Type '=' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText4;

            // Type '=d1' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValueParams.UICellContentEditText5;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValueParams.UICellContentEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// Assert that a value of the formula cell is FormulaError if one of the variables is a string.
        /// </summary>
        public void AssertFormulaError1()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'Error: The variable D1 is undefined'
            Assert.AreEqual(this.AssertFormulaError1ExpectedValues.UICellValueEditText, uICellValueEdit.Text, "THe value of this cell should be FormulaError.");
        }
        
        /// <summary>
        /// Check the Changed Cells text box. It should have right dependents of the last changed cell.
        /// </summary>
        public void ChangedCells()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(48, 42));

            // Type '3' in 'cellContent' text box
            uICellContentEdit.Text = this.ChangedCellsParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.ChangedCellsParams.UICellContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks if  all dependents of the changed cell are listed in the changed cells textbox.
        /// </summary>
        public void AssertChangedCells()
        {
            #region Variable Declarations
            WinEdit uIChangedCellsEdit = this.UIForm1Window.UIChangedCellsWindow.UIChangedCellsEdit;
            #endregion

            // Verify that the 'Text' property of 'changedCells' text box equals 'A1, B1, C1, '
            Assert.AreEqual(this.AssertChangedCellsExpectedValues.UIChangedCellsEditText, uIChangedCellsEdit.Text, "Contents of Changed cells textbox doesn\'t match dependents of the last changed ce" +
                    "ll.");
        }
        
        /// <summary>
        /// Checks if the name of the choosen cell is displayed correctly.
        /// </summary>
        public void CellsName()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(235, 44));
        }
        
        /// <summary>
        /// Asserts that the name of a cell is displayed correctly.
        /// </summary>
        public void AssertCellsName()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UIForm1Window.UIA1Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'cellName' text box equals 'C1'
            Assert.AreEqual(this.AssertCellsNameExpectedValues.UICellNameEditText, uICellNameEdit.Text, "The name of the choosen cell is not displayed correctly.");
        }
        
        /// <summary>
        /// Chages a value of a cell to be FormulaError. It should cause all the dependent cells to have FormulaError values.
        /// </summary>
        public void FormulaErrorValue1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(87, 38));

            // Type '=e1' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaErrorValue1Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaErrorValue1Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(237, 40));
        }
        
        /// <summary>
        /// Asserts that a value of a cell is FormulaError.
        /// </summary>
        public void AssertFormulaError2()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'Error: The variable B1 is undefined'
            Assert.AreEqual(this.AssertFormulaError2ExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The value of the cell was expected to be FormulaError.");
        }
        
        /// <summary>
        /// Sets a content of a cell to a formula with an invalid variable name. The vale textbox should have an error message.
        /// </summary>
        public void InvalidName()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(459, 36));

            // Type '=gg9' in 'cellContent' text box
            uICellContentEdit.Text = this.InvalidNameParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.InvalidNameParams.UICellContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Asserts the right error message when an invalid variable is entered.
        /// </summary>
        public void AssertErrorMessage1()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'The variable GG9 didn't pass validation'
            Assert.AreEqual(this.AssertErrorMessage1ExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The error message is not as expected.");
        }
        
        /// <summary>
        /// The contents of a cell is set to a formula, which has a division by 0. The error of division by 0 is expected.
        /// </summary>
        public void DivisionByZero()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(84, 38));

            // Type '=4' in 'cellContent' text box
            uICellContentEdit.Text = this.DivisionByZeroParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivisionByZeroParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(479, 39));

            // Type '=C1/(a1-4)' in 'cellContent' text box
            uICellContentEdit.Text = this.DivisionByZeroParams.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivisionByZeroParams.UICellContentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Asserts the error message indicating diviision by 0 inside the value textbox.
        /// </summary>
        public void AssertDivisionByZero()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'Error: Division by 0 is prohibited.'
            Assert.AreEqual(this.AssertDivisionByZeroExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The division by 0 error was expected in the value textbox.");
        }
        
        /// <summary>
        /// Closing and saving the form.
        /// </summary>
        public void ClosingTheForm1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetUtilityWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(53, 15));

            // Select 'myss1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ClosingTheForm1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(54, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(11, 12));
        }
        
        /// <summary>
        /// Calculate a formula.
        /// </summary>
        public void FormulaValue1()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinTitleBar uIForm1TitleBar = this.UIForm1Window1.UIForm1TitleBar;
            WinEdit uICellContentEdit = this.UIForm1Window1.UICellContentWindow.UICellContentEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.FormulaValue1Params.UIForm1WindowExePath, this.FormulaValue1Params.UIForm1WindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(36, 6));

            // Click 'Form1' title bar
            Mouse.Click(uIForm1TitleBar, new Point(109, 11));

            // Type '=155+67/2' in 'cellContent' text box
            uICellContentEdit.Text = this.FormulaValue1Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.FormulaValue1Params.UICellContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Assert the right value of the formula.
        /// </summary>
        public void AssertFormulaValue1()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window1.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals '188.5'
            Assert.AreEqual(this.AssertFormulaValue1ExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The value of a formula is wrong.");
        }
        
        /// <summary>
        /// One form is saved and closed. The first form is expected to stay.
        /// </summary>
        public void FormulaClosed()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuBar uIMenuStrip1MenuBar = this.UIForm1Window1.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinMenuItem uICloseMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetUtilityWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(8, 16));

            // Double-Click 'menuStrip1' menu bar
            Mouse.DoubleClick(uIMenuStrip1MenuBar, new Point(1269, 45));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(1261, 16));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(1258, 36));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(50, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(45, 9));

            // Select 'myss2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.FormulaClosedParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(22, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(37, 12));
        }
        
        /// <summary>
        /// When one form is closed, the first one should stay.
        /// </summary>
        public void AssertFormStaying()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UIForm1Window.UIA1Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertFormStayingExpectedValues.UICellNameEditText, uICellNameEdit.Text, "The first form is changed.");
        }
        
        /// <summary>
        /// Closing the form without saving.
        /// </summary>
        public void ClosingTheForm2()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetUtilityWindow.UINOWindow.UINOButton;
            #endregion

            // Type '6' in 'cellContent' text box
            uICellContentEdit.Text = this.ClosingTheForm2Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.ClosingTheForm2Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(42, 14));
        }
        
        /// <summary>
        /// Testing file -> Save method
        /// </summary>
        public void SavingForm1()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.SavingForm1Params.UIForm1WindowExePath, this.SavingForm1Params.UIForm1WindowAlternateExePath);

            // Type '=66+33' in 'cellContent' text box
            uICellContentEdit.Text = this.SavingForm1Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.SavingForm1Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(31, 10));

            // Select 'mytest1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SavingForm1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(40, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(24, 10));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(42, 9));
        }
        
        /// <summary>
        /// Testing saving a file and making sure that nothing changed in the form.
        /// </summary>
        public void AssertValue()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals '99'
            Assert.AreEqual(this.AssertValueExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The value of a cell is not right.");
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 11));
        }
        
        
        
        /// <summary>
        /// Testing SaveAs method.
        /// </summary>
        public void SaveAs1()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uISaveAsMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinButton uIYesButton1 = this.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.SaveAs1Params.UIForm1WindowExePath, this.SaveAs1Params.UIForm1WindowAlternateExePath);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(20, 10));

            // Click 'File' -> 'SaveAs' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(62, 9));

            // Select 'empty' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAs1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(50, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(32, 16));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(35, 7));

            // Select 'empty1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAs1Params.UIFilenameComboBoxEditableItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(61, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(10, 9));

            // Type '=9' in 'cellContent' text box
            uICellContentEdit.Text = this.SaveAs1Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.SaveAs1Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'SaveAs' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(51, 13));

            // Select 'notempty' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAs1Params.UIFilenameComboBoxEditableItem2;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(20, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(25, 15));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(35, 13));
        }
        
        /// <summary>
        /// Assert that a value of a cell is still the same after saving.
        /// </summary>
        public void AssertValue1()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals '9'
            Assert.AreEqual(this.AssertValue1ExpectedValues.UICellValueEditText, uICellValueEdit.Text, "The value of a choosen cell is not right.");
        }
        
        /// <summary>
        /// testing the help window
        /// </summary>
        public void HelpWindow()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(29, 13));
        }
        
        /// <summary>
        /// Assert the help window exists.
        /// </summary>
        public void AssertHelp()
        {
            #region Variable Declarations
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            #endregion

            // Verify that the 'Enabled' property of Dialog equals 'True'
            Assert.AreEqual(this.AssertHelpExpectedValues.UIItemDialogEnabled, uIItemDialog.Enabled);
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm5()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 12));
        }
        
        /// <summary>
        /// Testing save -> cancel and X(close) ->cancel
        ///The form should still be there.
        /// </summary>
        public void CancelButton()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uICancelButton1 = this.UISpreadsheetUtilityWindow.UICancelWindow.UICancelButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.CancelButtonParams.UIForm1WindowExePath, this.CancelButtonParams.UIForm1WindowAlternateExePath);

            // Type '=89' in 'cellContent' text box
            uICellContentEdit.Text = this.CancelButtonParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.CancelButtonParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(43, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(32, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(59, 14));
        }
        
        /// <summary>
        /// Assert that the form is not closed after canceling saving or closing the form.
        /// </summary>
        public void AssertFormStaying1()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UISavingWindow.UIA1Window.UICellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertFormStaying1ExpectedValues.UICellNameEditText, uICellNameEdit.Text, "The form is closed or the cell\'s name changed.");
        }
        
        /// <summary>
        /// Check if the error message pops-up when we try to open a non-existent file.
        /// </summary>
        public void ErrorOnOpening()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISavingWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(22, 4));

            // Select 'nonexistent' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ErrorOnOpeningParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(24, 14));
        }
        
        /// <summary>
        /// Asserts there is an error message when opening a non-existent file.
        /// </summary>
        public void AssertErrorOnOpening()
        {
            #region Variable Declarations
            WinPane uIOpenPane = this.UIOpenWindow1.UIOpenDialog.UIOpenPane;
            #endregion

            // Verify that the 'Enabled' property of 'Open' pane equals 'True'
            Assert.AreEqual(this.AssertErrorOnOpeningExpectedValues.UIOpenPaneEnabled, uIOpenPane.Enabled);
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm6()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOpenWindow1.UIOpenPane.UIOKButton;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton = this.UISavingWindow.UISavingTitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetUtilityWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 5));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 14));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(66, 4));
        }
        
       
        
        /// <summary>
        /// Checking error message when the version of a spreadsheet in the XML file is wrong.
        /// </summary>
        public void VersionOfSS2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.VersionOfSS2Params.UIForm1WindowExePath, this.VersionOfSS2Params.UIForm1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(40, 12));

            // Select 'test2.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.VersionOfSS2Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(42, 14));
        }
        
        /// <summary>
        /// Assert that an error message is shown if a version is wrong.
        /// </summary>
        public void AssertErrorMessage4()
        {
            #region Variable Declarations
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            #endregion

            // Verify that the 'Enabled' property of Dialog equals 'True'
            Assert.AreEqual(this.AssertErrorMessage4ExpectedValues.UIItemDialogEnabled, uIItemDialog.Enabled);
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm9()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(37, 14));
        }
        
        /// <summary>
        /// Open demo.ss
        /// </summary>
        public void OpenSS2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UICUsersTanyaDocumentsWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.OpenSS2Params.UIForm1WindowExePath, this.OpenSS2Params.UIForm1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(30, 13));

            // Select 'demo.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenSS2Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(25, 20));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(138, 54));
        }
        
        /// <summary>
        /// Assert the demo.ss file has 12 in the B2 cell.
        /// </summary>
        public void AssertValue3()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UICUsersTanyaDocumentsWindow.UIItem4Window.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals '12'
            Assert.AreEqual(this.AssertValue3ExpectedValues.UICellValueEditText, uICellValueEdit.Text);
        }
        
        /// <summary>
        /// Closing the form.
        /// </summary>
        public void ClosingTheForm10()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UICUsersTanyaDocumentsWindow.UICUsersTanyaDocumentsTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(37, 6));
        }
        
        #region Properties
        public virtual OpenSSParams OpenSSParams
        {
            get
            {
                if ((this.mOpenSSParams == null))
                {
                    this.mOpenSSParams = new OpenSSParams();
                }
                return this.mOpenSSParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual FormulaErrorValueParams FormulaErrorValueParams
        {
            get
            {
                if ((this.mFormulaErrorValueParams == null))
                {
                    this.mFormulaErrorValueParams = new FormulaErrorValueParams();
                }
                return this.mFormulaErrorValueParams;
            }
        }
        
        public virtual AssertFormulaError1ExpectedValues AssertFormulaError1ExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaError1ExpectedValues == null))
                {
                    this.mAssertFormulaError1ExpectedValues = new AssertFormulaError1ExpectedValues();
                }
                return this.mAssertFormulaError1ExpectedValues;
            }
        }
        
        public virtual ChangedCellsParams ChangedCellsParams
        {
            get
            {
                if ((this.mChangedCellsParams == null))
                {
                    this.mChangedCellsParams = new ChangedCellsParams();
                }
                return this.mChangedCellsParams;
            }
        }
        
        public virtual AssertChangedCellsExpectedValues AssertChangedCellsExpectedValues
        {
            get
            {
                if ((this.mAssertChangedCellsExpectedValues == null))
                {
                    this.mAssertChangedCellsExpectedValues = new AssertChangedCellsExpectedValues();
                }
                return this.mAssertChangedCellsExpectedValues;
            }
        }
        
        public virtual AssertCellsNameExpectedValues AssertCellsNameExpectedValues
        {
            get
            {
                if ((this.mAssertCellsNameExpectedValues == null))
                {
                    this.mAssertCellsNameExpectedValues = new AssertCellsNameExpectedValues();
                }
                return this.mAssertCellsNameExpectedValues;
            }
        }
        
        public virtual FormulaErrorValue1Params FormulaErrorValue1Params
        {
            get
            {
                if ((this.mFormulaErrorValue1Params == null))
                {
                    this.mFormulaErrorValue1Params = new FormulaErrorValue1Params();
                }
                return this.mFormulaErrorValue1Params;
            }
        }
        
        public virtual AssertFormulaError2ExpectedValues AssertFormulaError2ExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaError2ExpectedValues == null))
                {
                    this.mAssertFormulaError2ExpectedValues = new AssertFormulaError2ExpectedValues();
                }
                return this.mAssertFormulaError2ExpectedValues;
            }
        }
        
        public virtual InvalidNameParams InvalidNameParams
        {
            get
            {
                if ((this.mInvalidNameParams == null))
                {
                    this.mInvalidNameParams = new InvalidNameParams();
                }
                return this.mInvalidNameParams;
            }
        }
        
        public virtual AssertErrorMessage1ExpectedValues AssertErrorMessage1ExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessage1ExpectedValues == null))
                {
                    this.mAssertErrorMessage1ExpectedValues = new AssertErrorMessage1ExpectedValues();
                }
                return this.mAssertErrorMessage1ExpectedValues;
            }
        }
        
        public virtual DivisionByZeroParams DivisionByZeroParams
        {
            get
            {
                if ((this.mDivisionByZeroParams == null))
                {
                    this.mDivisionByZeroParams = new DivisionByZeroParams();
                }
                return this.mDivisionByZeroParams;
            }
        }
        
        public virtual AssertDivisionByZeroExpectedValues AssertDivisionByZeroExpectedValues
        {
            get
            {
                if ((this.mAssertDivisionByZeroExpectedValues == null))
                {
                    this.mAssertDivisionByZeroExpectedValues = new AssertDivisionByZeroExpectedValues();
                }
                return this.mAssertDivisionByZeroExpectedValues;
            }
        }
        
        public virtual ClosingTheForm1Params ClosingTheForm1Params
        {
            get
            {
                if ((this.mClosingTheForm1Params == null))
                {
                    this.mClosingTheForm1Params = new ClosingTheForm1Params();
                }
                return this.mClosingTheForm1Params;
            }
        }
        
        public virtual FormulaValue1Params FormulaValue1Params
        {
            get
            {
                if ((this.mFormulaValue1Params == null))
                {
                    this.mFormulaValue1Params = new FormulaValue1Params();
                }
                return this.mFormulaValue1Params;
            }
        }
        
        public virtual AssertFormulaValue1ExpectedValues AssertFormulaValue1ExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaValue1ExpectedValues == null))
                {
                    this.mAssertFormulaValue1ExpectedValues = new AssertFormulaValue1ExpectedValues();
                }
                return this.mAssertFormulaValue1ExpectedValues;
            }
        }
        
        public virtual FormulaClosedParams FormulaClosedParams
        {
            get
            {
                if ((this.mFormulaClosedParams == null))
                {
                    this.mFormulaClosedParams = new FormulaClosedParams();
                }
                return this.mFormulaClosedParams;
            }
        }
        
        public virtual AssertFormStayingExpectedValues AssertFormStayingExpectedValues
        {
            get
            {
                if ((this.mAssertFormStayingExpectedValues == null))
                {
                    this.mAssertFormStayingExpectedValues = new AssertFormStayingExpectedValues();
                }
                return this.mAssertFormStayingExpectedValues;
            }
        }
        
        public virtual ClosingTheForm2Params ClosingTheForm2Params
        {
            get
            {
                if ((this.mClosingTheForm2Params == null))
                {
                    this.mClosingTheForm2Params = new ClosingTheForm2Params();
                }
                return this.mClosingTheForm2Params;
            }
        }
        
        public virtual SavingForm1Params SavingForm1Params
        {
            get
            {
                if ((this.mSavingForm1Params == null))
                {
                    this.mSavingForm1Params = new SavingForm1Params();
                }
                return this.mSavingForm1Params;
            }
        }
        
        public virtual AssertValueExpectedValues AssertValueExpectedValues
        {
            get
            {
                if ((this.mAssertValueExpectedValues == null))
                {
                    this.mAssertValueExpectedValues = new AssertValueExpectedValues();
                }
                return this.mAssertValueExpectedValues;
            }
        }
        
        public virtual OpenSS1Params OpenSS1Params
        {
            get
            {
                if ((this.mOpenSS1Params == null))
                {
                    this.mOpenSS1Params = new OpenSS1Params();
                }
                return this.mOpenSS1Params;
            }
        }
        
        public virtual AssertValue2ExpectedValues AssertValue2ExpectedValues
        {
            get
            {
                if ((this.mAssertValue2ExpectedValues == null))
                {
                    this.mAssertValue2ExpectedValues = new AssertValue2ExpectedValues();
                }
                return this.mAssertValue2ExpectedValues;
            }
        }
        
        public virtual SaveAs1Params SaveAs1Params
        {
            get
            {
                if ((this.mSaveAs1Params == null))
                {
                    this.mSaveAs1Params = new SaveAs1Params();
                }
                return this.mSaveAs1Params;
            }
        }
        
        public virtual AssertValue1ExpectedValues AssertValue1ExpectedValues
        {
            get
            {
                if ((this.mAssertValue1ExpectedValues == null))
                {
                    this.mAssertValue1ExpectedValues = new AssertValue1ExpectedValues();
                }
                return this.mAssertValue1ExpectedValues;
            }
        }
        
        public virtual AssertHelpExpectedValues AssertHelpExpectedValues
        {
            get
            {
                if ((this.mAssertHelpExpectedValues == null))
                {
                    this.mAssertHelpExpectedValues = new AssertHelpExpectedValues();
                }
                return this.mAssertHelpExpectedValues;
            }
        }
        
        public virtual CancelButtonParams CancelButtonParams
        {
            get
            {
                if ((this.mCancelButtonParams == null))
                {
                    this.mCancelButtonParams = new CancelButtonParams();
                }
                return this.mCancelButtonParams;
            }
        }
        
        public virtual AssertFormStaying1ExpectedValues AssertFormStaying1ExpectedValues
        {
            get
            {
                if ((this.mAssertFormStaying1ExpectedValues == null))
                {
                    this.mAssertFormStaying1ExpectedValues = new AssertFormStaying1ExpectedValues();
                }
                return this.mAssertFormStaying1ExpectedValues;
            }
        }
        
        public virtual ErrorOnOpeningParams ErrorOnOpeningParams
        {
            get
            {
                if ((this.mErrorOnOpeningParams == null))
                {
                    this.mErrorOnOpeningParams = new ErrorOnOpeningParams();
                }
                return this.mErrorOnOpeningParams;
            }
        }
        
        public virtual AssertErrorOnOpeningExpectedValues AssertErrorOnOpeningExpectedValues
        {
            get
            {
                if ((this.mAssertErrorOnOpeningExpectedValues == null))
                {
                    this.mAssertErrorOnOpeningExpectedValues = new AssertErrorOnOpeningExpectedValues();
                }
                return this.mAssertErrorOnOpeningExpectedValues;
            }
        }
        
        public virtual VersionOfSSParams VersionOfSSParams
        {
            get
            {
                if ((this.mVersionOfSSParams == null))
                {
                    this.mVersionOfSSParams = new VersionOfSSParams();
                }
                return this.mVersionOfSSParams;
            }
        }
        
        public virtual AssertErrorMessage2ExpectedValues AssertErrorMessage2ExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessage2ExpectedValues == null))
                {
                    this.mAssertErrorMessage2ExpectedValues = new AssertErrorMessage2ExpectedValues();
                }
                return this.mAssertErrorMessage2ExpectedValues;
            }
        }
        
        public virtual VersionOfSS1Params VersionOfSS1Params
        {
            get
            {
                if ((this.mVersionOfSS1Params == null))
                {
                    this.mVersionOfSS1Params = new VersionOfSS1Params();
                }
                return this.mVersionOfSS1Params;
            }
        }
        
        public virtual AssertErrorMessage3ExpectedValues AssertErrorMessage3ExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessage3ExpectedValues == null))
                {
                    this.mAssertErrorMessage3ExpectedValues = new AssertErrorMessage3ExpectedValues();
                }
                return this.mAssertErrorMessage3ExpectedValues;
            }
        }
        
        public virtual VersionOfSS2Params VersionOfSS2Params
        {
            get
            {
                if ((this.mVersionOfSS2Params == null))
                {
                    this.mVersionOfSS2Params = new VersionOfSS2Params();
                }
                return this.mVersionOfSS2Params;
            }
        }
        
        public virtual AssertErrorMessage4ExpectedValues AssertErrorMessage4ExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessage4ExpectedValues == null))
                {
                    this.mAssertErrorMessage4ExpectedValues = new AssertErrorMessage4ExpectedValues();
                }
                return this.mAssertErrorMessage4ExpectedValues;
            }
        }
        
        public virtual OpenSS2Params OpenSS2Params
        {
            get
            {
                if ((this.mOpenSS2Params == null))
                {
                    this.mOpenSS2Params = new OpenSS2Params();
                }
                return this.mOpenSS2Params;
            }
        }
        
        public virtual AssertValue3ExpectedValues AssertValue3ExpectedValues
        {
            get
            {
                if ((this.mAssertValue3ExpectedValues == null))
                {
                    this.mAssertValue3ExpectedValues = new AssertValue3ExpectedValues();
                }
                return this.mAssertValue3ExpectedValues;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UISpreadsheetUtilityWindow UISpreadsheetUtilityWindow
        {
            get
            {
                if ((this.mUISpreadsheetUtilityWindow == null))
                {
                    this.mUISpreadsheetUtilityWindow = new UISpreadsheetUtilityWindow();
                }
                return this.mUISpreadsheetUtilityWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIForm1Window1 UIForm1Window1
        {
            get
            {
                if ((this.mUIForm1Window1 == null))
                {
                    this.mUIForm1Window1 = new UIForm1Window1();
                }
                return this.mUIForm1Window1;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1();
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersTanyaDocumentsWindow UICUsersTanyaDocumentsWindow
        {
            get
            {
                if ((this.mUICUsersTanyaDocumentsWindow == null))
                {
                    this.mUICUsersTanyaDocumentsWindow = new UICUsersTanyaDocumentsWindow();
                }
                return this.mUICUsersTanyaDocumentsWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISavingWindow UISavingWindow
        {
            get
            {
                if ((this.mUISavingWindow == null))
                {
                    this.mUISavingWindow = new UISavingWindow();
                }
                return this.mUISavingWindow;
            }
        }
        
        public UIOpenWindow11 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow11();
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private OpenSSParams mOpenSSParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private FormulaErrorValueParams mFormulaErrorValueParams;
        
        private AssertFormulaError1ExpectedValues mAssertFormulaError1ExpectedValues;
        
        private ChangedCellsParams mChangedCellsParams;
        
        private AssertChangedCellsExpectedValues mAssertChangedCellsExpectedValues;
        
        private AssertCellsNameExpectedValues mAssertCellsNameExpectedValues;
        
        private FormulaErrorValue1Params mFormulaErrorValue1Params;
        
        private AssertFormulaError2ExpectedValues mAssertFormulaError2ExpectedValues;
        
        private InvalidNameParams mInvalidNameParams;
        
        private AssertErrorMessage1ExpectedValues mAssertErrorMessage1ExpectedValues;
        
        private DivisionByZeroParams mDivisionByZeroParams;
        
        private AssertDivisionByZeroExpectedValues mAssertDivisionByZeroExpectedValues;
        
        private ClosingTheForm1Params mClosingTheForm1Params;
        
        private FormulaValue1Params mFormulaValue1Params;
        
        private AssertFormulaValue1ExpectedValues mAssertFormulaValue1ExpectedValues;
        
        private FormulaClosedParams mFormulaClosedParams;
        
        private AssertFormStayingExpectedValues mAssertFormStayingExpectedValues;
        
        private ClosingTheForm2Params mClosingTheForm2Params;
        
        private SavingForm1Params mSavingForm1Params;
        
        private AssertValueExpectedValues mAssertValueExpectedValues;
        
        private OpenSS1Params mOpenSS1Params;
        
        private AssertValue2ExpectedValues mAssertValue2ExpectedValues;
        
        private SaveAs1Params mSaveAs1Params;
        
        private AssertValue1ExpectedValues mAssertValue1ExpectedValues;
        
        private AssertHelpExpectedValues mAssertHelpExpectedValues;
        
        private CancelButtonParams mCancelButtonParams;
        
        private AssertFormStaying1ExpectedValues mAssertFormStaying1ExpectedValues;
        
        private ErrorOnOpeningParams mErrorOnOpeningParams;
        
        private AssertErrorOnOpeningExpectedValues mAssertErrorOnOpeningExpectedValues;
        
        private VersionOfSSParams mVersionOfSSParams;
        
        private AssertErrorMessage2ExpectedValues mAssertErrorMessage2ExpectedValues;
        
        private VersionOfSS1Params mVersionOfSS1Params;
        
        private AssertErrorMessage3ExpectedValues mAssertErrorMessage3ExpectedValues;
        
        private VersionOfSS2Params mVersionOfSS2Params;
        
        private AssertErrorMessage4ExpectedValues mAssertErrorMessage4ExpectedValues;
        
        private OpenSS2Params mOpenSS2Params;
        
        private AssertValue3ExpectedValues mAssertValue3ExpectedValues;
        
        private UIForm1Window mUIForm1Window;
        
        private UISpreadsheetUtilityWindow mUISpreadsheetUtilityWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIForm1Window1 mUIForm1Window1;
        
        private UIYesWindow1 mUIYesWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersTanyaDocumentsWindow mUICUsersTanyaDocumentsWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISavingWindow mUISavingWindow;
        
        private UIOpenWindow11 mUIOpenWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSS'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OpenSSParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellName' text box equals 'A1'
        /// </summary>
        public string UICellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaErrorValueParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '7' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=a1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=b1+7' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText2 = "=b1+7";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'test' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText3 = "test";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText4 = "=";
        
        /// <summary>
        /// Type '=d1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText5 = "=d1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaError1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertFormulaError1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'Error: The variable D1 is undefined'
        /// </summary>
        public string UICellValueEditText = "Error: The variable D1 is undefined";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangedCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ChangedCellsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertChangedCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertChangedCellsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'changedCells' text box equals 'A1, B1, C1, '
        /// </summary>
        public string UIChangedCellsEditText = "A1, B1, C1, ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellsName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertCellsNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellName' text box equals 'C1'
        /// </summary>
        public string UICellNameEditText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorValue1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaErrorValue1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=e1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=e1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaError2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertFormulaError2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'Error: The variable B1 is undefined'
        /// </summary>
        public string UICellValueEditText = "Error: The variable B1 is undefined";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class InvalidNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=gg9' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=gg9";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertErrorMessage1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'The variable GG9 didn't pass validation'
        /// </summary>
        public string UICellValueEditText = "The variable GG9 didn\'t pass validation";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DivisionByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DivisionByZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=4' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=4";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=C1/(a1-4)' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=C1/(a1-4)";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDivisionByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertDivisionByZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'Error: Division by 0 is prohibited.'
        /// </summary>
        public string UICellValueEditText = "Error: Division by 0 is prohibited.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClosingTheForm1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ClosingTheForm1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'myss1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "myss1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaValue1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaValue1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=155+67/2' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=155+67/2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaValue1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertFormulaValue1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '188.5'
        /// </summary>
        public string UICellValueEditText = "188.5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaClosed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class FormulaClosedParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'myss2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "myss2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormStaying'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertFormStayingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellName' text box equals 'A1'
        /// </summary>
        public string UICellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClosingTheForm2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ClosingTheForm2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '6' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SavingForm1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class SavingForm1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=66+33' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=66+33";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'mytest1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "mytest1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '99'
        /// </summary>
        public string UICellValueEditText = "99";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSS1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OpenSS1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValue2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertValue2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '12'
        /// </summary>
        public string UICellValueEditText = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAs1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class SaveAs1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'empty' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "empty";
        
        /// <summary>
        /// Select 'empty1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "empty1";
        
        /// <summary>
        /// Type '=9' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=9";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'notempty' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "notempty";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValue1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertValue1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '9'
        /// </summary>
        public string UICellValueEditText = "9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertHelpExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of Dialog equals 'True'
        /// </summary>
        public bool UIItemDialogEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CancelButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class CancelButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=89' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=89";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormStaying1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertFormStaying1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellName' text box equals 'A1'
        /// </summary>
        public string UICellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ErrorOnOpening'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ErrorOnOpeningParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'nonexistent' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "nonexistent";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorOnOpening'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertErrorOnOpeningExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Open' pane equals 'True'
        /// </summary>
        public bool UIOpenPaneEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VersionOfSS'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class VersionOfSSParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertErrorMessage2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of Dialog equals 'True'
        /// </summary>
        public bool UIItemDialogEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VersionOfSS1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class VersionOfSS1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertErrorMessage3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of Dialog equals 'True'
        /// </summary>
        public bool UIItemDialogEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VersionOfSS2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class VersionOfSS2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'test2.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test2.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertErrorMessage4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of Dialog equals 'True'
        /// </summary>
        public bool UIItemDialogEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSS2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OpenSS2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\D" +
            "ebug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'demo.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValue3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertValue3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '12'
        /// </summary>
        public string UICellValueEditText = "12";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\mytest1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\notempty.ss");
            #endregion
        }
        
        #region Properties
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UICellContentWindow UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellValueWindow UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow(this);
                }
                return this.mUICellValueWindow;
            }
        }
        
        public UIChangedCellsWindow UIChangedCellsWindow
        {
            get
            {
                if ((this.mUIChangedCellsWindow == null))
                {
                    this.mUIChangedCellsWindow = new UIChangedCellsWindow(this);
                }
                return this.mUIChangedCellsWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window mUIA1Window;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        
        private UICellContentWindow mUICellContentWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellValueWindow mUICellValueWindow;
        
        private UIChangedCellsWindow mUIChangedCellsWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICellContentWindow : WinWindow
    {
        
        public UICellContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICellValueWindow : WinWindow
    {
        
        public UICellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "contents";
                    this.mUICellValueEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIChangedCellsWindow : WinWindow
    {
        
        public UIChangedCellsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "changedCells";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIChangedCellsEdit
        {
            get
            {
                if ((this.mUIChangedCellsEdit == null))
                {
                    this.mUIChangedCellsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIChangedCellsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "cell\'s name";
                    this.mUIChangedCellsEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIChangedCellsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIChangedCellsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\mytest1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\notempty.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty1.ss");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\mytest1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty1.ss");
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\notempty.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Form1");
                    this.mUISaveMenuItem.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\mytest1.ss");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "SaveAs";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Form1");
                    this.mUISaveAsMenuItem.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\empty1.ss");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISpreadsheetUtilityWindow : WinWindow
    {
        
        public UISpreadsheetUtilityWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Utility";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet Utility");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet Utility");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet Utility");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet Utility");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet Utility");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet Utility");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Spreadsheet Utility");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIForm1Window1 : WinWindow
    {
        
        public UIForm1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIForm1TitleBar.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UICellContentWindow1 UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow1(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UICellValueWindow1 UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow1(this);
                }
                return this.mUICellValueWindow;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIForm1TitleBar;
        
        private UICellContentWindow1 mUICellContentWindow;
        
        private UICellValueWindow1 mUICellValueWindow;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICellContentWindow1 : WinWindow
    {
        
        public UICellContentWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICellValueWindow1 : WinWindow
    {
        
        public UICellValueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "contents";
                    this.mUICellValueEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "&Yes";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("&Yes");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("&Yes");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICancelWindow2 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow2(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UICancelWindow2 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemossListItem UIDemossListItem
        {
            get
            {
                if ((this.mUIDemossListItem == null))
                {
                    this.mUIDemossListItem = new UIDemossListItem(this);
                }
                return this.mUIDemossListItem;
            }
        }
        
        public UITest2ssListItem UITest2ssListItem
        {
            get
            {
                if ((this.mUITest2ssListItem == null))
                {
                    this.mUITest2ssListItem = new UITest2ssListItem(this);
                }
                return this.mUITest2ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemossListItem mUIDemossListItem;
        
        private UITest2ssListItem mUITest2ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDemossListItem : WinListItem
    {
        
        public UIDemossListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITest2ssListItem : WinListItem
    {
        
        public UITest2ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICancelWindow2 : WinWindow
    {
        
        public UICancelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICUsersTanyaDocumentsWindow : WinWindow
    {
        
        public UICUsersTanyaDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem4Window UIItem4Window
        {
            get
            {
                if ((this.mUIItem4Window == null))
                {
                    this.mUIItem4Window = new UIItem4Window(this);
                }
                return this.mUIItem4Window;
            }
        }
        
        public UICUsersTanyaDocumentsTitleBar UICUsersTanyaDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersTanyaDocumentsTitleBar == null))
                {
                    this.mUICUsersTanyaDocumentsTitleBar = new UICUsersTanyaDocumentsTitleBar(this);
                }
                return this.mUICUsersTanyaDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItem4Window mUIItem4Window;
        
        private UICUsersTanyaDocumentsTitleBar mUICUsersTanyaDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItem4Window : WinWindow
    {
        
        public UIItem4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "contents";
                    this.mUICellValueEdit.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICUsersTanyaDocumentsTitleBar : WinTitleBar
    {
        
        public UICUsersTanyaDocumentsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Tanya\\Documents\\Visual Studio 2012\\Projects\\PS6\\demo.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISavingWindow : WinWindow
    {
        
        public UISavingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "saving ...";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("saving ...");
            #endregion
        }
        
        #region Properties
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISavingTitleBar UISavingTitleBar
        {
            get
            {
                if ((this.mUISavingTitleBar == null))
                {
                    this.mUISavingTitleBar = new UISavingTitleBar(this);
                }
                return this.mUISavingTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window1 mUIA1Window;
        
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UISavingTitleBar mUISavingTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("saving ...");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("saving ...");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("saving ...");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("saving ...");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("saving ...");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISavingTitleBar : WinTitleBar
    {
        
        public UISavingTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("saving ...");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("saving ...");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow11 : WinWindow
    {
        
        public UIOpenWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIOpenDialog UIOpenDialog
        {
            get
            {
                if ((this.mUIOpenDialog == null))
                {
                    this.mUIOpenDialog = new UIOpenDialog(this);
                }
                return this.mUIOpenDialog;
            }
        }
        
        public UIOpenPane UIOpenPane
        {
            get
            {
                if ((this.mUIOpenPane == null))
                {
                    this.mUIOpenPane = new UIOpenPane(this);
                }
                return this.mUIOpenPane;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenDialog mUIOpenDialog;
        
        private UIOpenPane mUIOpenPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenDialog : WinControl
    {
        
        public UIOpenDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Open";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinPane UIOpenPane
        {
            get
            {
                if ((this.mUIOpenPane == null))
                {
                    this.mUIOpenPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIOpenPane.SearchProperties[WinControl.PropertyNames.Name] = "Open";
                    this.mUIOpenPane.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenPane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIOpenPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenPane : WinPane
    {
        
        public UIOpenPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Open";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
